{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Library import"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Download and Labeling "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-58efcc22dfd1>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mmainDF\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'https://archive.ics.uci.edu/ml/machine-learning-databases/00484/tripadvisor_review.csv'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'pd' is not defined"
     ]
    }
   ],
   "source": [
    "mainDF = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/00484/tripadvisor_review.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'mainDF' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-2-307d55613d7c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mmainDF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'User ID'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mmainDF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'art galleries'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'dance clubs'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'juice bars'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'restaurants'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'museums'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'resorts'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'parks'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'beaches'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'theaters'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'religious_institutions'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mmainDF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m7\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'mainDF' is not defined"
     ]
    }
   ],
   "source": [
    "mainDF.drop('User ID',axis=1,inplace=True)\n",
    "mainDF.columns=['art galleries','dance clubs','juice bars','restaurants','museums','resorts','parks','beaches','theaters','religious_institutions']\n",
    "mainDF.head(7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'mainDF' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-3-1946b9dcccb4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mmainDF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'mainDF' is not defined"
     ]
    }
   ],
   "source": [
    "mainDF.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>art galleries</th>\n",
       "      <th>dance clubs</th>\n",
       "      <th>juice bars</th>\n",
       "      <th>restaurants</th>\n",
       "      <th>museums</th>\n",
       "      <th>resorts</th>\n",
       "      <th>parks</th>\n",
       "      <th>beaches</th>\n",
       "      <th>theaters</th>\n",
       "      <th>religious_institutions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>art galleries</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.187692</td>\n",
       "      <td>0.008613</td>\n",
       "      <td>0.073456</td>\n",
       "      <td>-0.100483</td>\n",
       "      <td>0.094142</td>\n",
       "      <td>-0.012474</td>\n",
       "      <td>0.020029</td>\n",
       "      <td>-0.047313</td>\n",
       "      <td>0.050700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dance clubs</th>\n",
       "      <td>-0.187692</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.043586</td>\n",
       "      <td>0.131624</td>\n",
       "      <td>0.119631</td>\n",
       "      <td>0.148404</td>\n",
       "      <td>0.110052</td>\n",
       "      <td>-0.158642</td>\n",
       "      <td>0.073342</td>\n",
       "      <td>-0.065762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>juice bars</th>\n",
       "      <td>0.008613</td>\n",
       "      <td>0.043586</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.061128</td>\n",
       "      <td>0.281668</td>\n",
       "      <td>0.356435</td>\n",
       "      <td>0.750651</td>\n",
       "      <td>-0.172953</td>\n",
       "      <td>-0.085435</td>\n",
       "      <td>-0.440543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>restaurants</th>\n",
       "      <td>0.073456</td>\n",
       "      <td>0.131624</td>\n",
       "      <td>0.061128</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.101878</td>\n",
       "      <td>0.215866</td>\n",
       "      <td>0.228348</td>\n",
       "      <td>-0.103583</td>\n",
       "      <td>0.026670</td>\n",
       "      <td>-0.352909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>museums</th>\n",
       "      <td>-0.100483</td>\n",
       "      <td>0.119631</td>\n",
       "      <td>0.281668</td>\n",
       "      <td>0.101878</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.581306</td>\n",
       "      <td>0.232318</td>\n",
       "      <td>-0.020957</td>\n",
       "      <td>0.041693</td>\n",
       "      <td>-0.247470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>resorts</th>\n",
       "      <td>0.094142</td>\n",
       "      <td>0.148404</td>\n",
       "      <td>0.356435</td>\n",
       "      <td>0.215866</td>\n",
       "      <td>0.581306</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.430743</td>\n",
       "      <td>0.000071</td>\n",
       "      <td>0.096410</td>\n",
       "      <td>-0.438104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parks</th>\n",
       "      <td>-0.012474</td>\n",
       "      <td>0.110052</td>\n",
       "      <td>0.750651</td>\n",
       "      <td>0.228348</td>\n",
       "      <td>0.232318</td>\n",
       "      <td>0.430743</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.072492</td>\n",
       "      <td>0.084965</td>\n",
       "      <td>-0.710731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>beaches</th>\n",
       "      <td>0.020029</td>\n",
       "      <td>-0.158642</td>\n",
       "      <td>-0.172953</td>\n",
       "      <td>-0.103583</td>\n",
       "      <td>-0.020957</td>\n",
       "      <td>0.000071</td>\n",
       "      <td>-0.072492</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.169695</td>\n",
       "      <td>0.114701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>theaters</th>\n",
       "      <td>-0.047313</td>\n",
       "      <td>0.073342</td>\n",
       "      <td>-0.085435</td>\n",
       "      <td>0.026670</td>\n",
       "      <td>0.041693</td>\n",
       "      <td>0.096410</td>\n",
       "      <td>0.084965</td>\n",
       "      <td>0.169695</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.045682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>religious_institutions</th>\n",
       "      <td>0.050700</td>\n",
       "      <td>-0.065762</td>\n",
       "      <td>-0.440543</td>\n",
       "      <td>-0.352909</td>\n",
       "      <td>-0.247470</td>\n",
       "      <td>-0.438104</td>\n",
       "      <td>-0.710731</td>\n",
       "      <td>0.114701</td>\n",
       "      <td>-0.045682</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        art galleries  dance clubs  juice bars  restaurants  \\\n",
       "art galleries                1.000000    -0.187692    0.008613     0.073456   \n",
       "dance clubs                 -0.187692     1.000000    0.043586     0.131624   \n",
       "juice bars                   0.008613     0.043586    1.000000     0.061128   \n",
       "restaurants                  0.073456     0.131624    0.061128     1.000000   \n",
       "museums                     -0.100483     0.119631    0.281668     0.101878   \n",
       "resorts                      0.094142     0.148404    0.356435     0.215866   \n",
       "parks                       -0.012474     0.110052    0.750651     0.228348   \n",
       "beaches                      0.020029    -0.158642   -0.172953    -0.103583   \n",
       "theaters                    -0.047313     0.073342   -0.085435     0.026670   \n",
       "religious_institutions       0.050700    -0.065762   -0.440543    -0.352909   \n",
       "\n",
       "                         museums   resorts     parks   beaches  theaters  \\\n",
       "art galleries          -0.100483  0.094142 -0.012474  0.020029 -0.047313   \n",
       "dance clubs             0.119631  0.148404  0.110052 -0.158642  0.073342   \n",
       "juice bars              0.281668  0.356435  0.750651 -0.172953 -0.085435   \n",
       "restaurants             0.101878  0.215866  0.228348 -0.103583  0.026670   \n",
       "museums                 1.000000  0.581306  0.232318 -0.020957  0.041693   \n",
       "resorts                 0.581306  1.000000  0.430743  0.000071  0.096410   \n",
       "parks                   0.232318  0.430743  1.000000 -0.072492  0.084965   \n",
       "beaches                -0.020957  0.000071 -0.072492  1.000000  0.169695   \n",
       "theaters                0.041693  0.096410  0.084965  0.169695  1.000000   \n",
       "religious_institutions -0.247470 -0.438104 -0.710731  0.114701 -0.045682   \n",
       "\n",
       "                        religious_institutions  \n",
       "art galleries                         0.050700  \n",
       "dance clubs                          -0.065762  \n",
       "juice bars                           -0.440543  \n",
       "restaurants                          -0.352909  \n",
       "museums                              -0.247470  \n",
       "resorts                              -0.438104  \n",
       "parks                                -0.710731  \n",
       "beaches                               0.114701  \n",
       "theaters                             -0.045682  \n",
       "religious_institutions                1.000000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_score = mainDF.corr()\n",
    "corr_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr_score)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Feature_selection\n",
    "feature =  mainDF.copy()\n",
    "feature.drop(['parks', 'beaches'], axis = 1,inplace=True) \n",
    "feature = np.array(feature.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SOM IMPLEMENTATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.spatial import distance\n",
    "\n",
    "class som(object):\n",
    "    \n",
    "    def __init__(self,lr,epoch,non):\n",
    "        self.lr = lr\n",
    "        self.epoch = epoch\n",
    "        self.no_of_neuron = non\n",
    "    \n",
    "    def train(self,x):\n",
    "        self.neuron = np.random.uniform(low=0,high=4 ,size = (self.no_of_neuron,x.shape[1]))\n",
    "        index_list = []\n",
    "        for _ in range(self.epoch):\n",
    "            for x_temp in x:\n",
    "                index_neuron = distance.cdist([x_temp], self.neuron,'euclidean').argmin()\n",
    "                self.neuron[index_neuron] += self.lr*(self.neuron[index_neuron]-x_temp)\n",
    "                index_list.append(index_neuron)\n",
    "            self.lr *= 0.125\n",
    "        return index_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 3, 0, 3, 0, 3, 0, 4, 3, 1, 0, 4, 3, 1, 0, 4, 3, 1, 0, 4, 2, 3,\n",
       "       1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0,\n",
       "       4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2,\n",
       "       3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1,\n",
       "       0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4,\n",
       "       2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3,\n",
       "       1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0,\n",
       "       4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2,\n",
       "       3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1,\n",
       "       0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4,\n",
       "       2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3,\n",
       "       1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0,\n",
       "       4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2,\n",
       "       3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1,\n",
       "       0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4,\n",
       "       2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3,\n",
       "       1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0,\n",
       "       4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2,\n",
       "       3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1,\n",
       "       0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4,\n",
       "       2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3,\n",
       "       1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0,\n",
       "       4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2,\n",
       "       3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1,\n",
       "       0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4,\n",
       "       2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3,\n",
       "       1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0,\n",
       "       4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2,\n",
       "       3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1,\n",
       "       0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4,\n",
       "       2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3,\n",
       "       1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0,\n",
       "       4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2,\n",
       "       3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1,\n",
       "       0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4,\n",
       "       2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3,\n",
       "       1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0,\n",
       "       4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2,\n",
       "       3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1,\n",
       "       0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4,\n",
       "       2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3,\n",
       "       1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0,\n",
       "       4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2,\n",
       "       3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4, 2, 3, 1,\n",
       "       0, 4, 2, 3, 1, 0, 4, 2, 3, 1, 0, 4], dtype=int64)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_int = 12\n",
    "som_imp = som(0.75,n_int,5)\n",
    "index_list = som_imp.train(feature)\n",
    "index_list = np.array(index_list).reshape(n_int,feature.shape[0])\n",
    "index_list[n_int-1,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>art galleries</th>\n",
       "      <th>dance clubs</th>\n",
       "      <th>juice bars</th>\n",
       "      <th>restaurants</th>\n",
       "      <th>museums</th>\n",
       "      <th>resorts</th>\n",
       "      <th>parks</th>\n",
       "      <th>beaches</th>\n",
       "      <th>theaters</th>\n",
       "      <th>religious_institutions</th>\n",
       "      <th>index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.93</td>\n",
       "      <td>1.80</td>\n",
       "      <td>2.29</td>\n",
       "      <td>0.62</td>\n",
       "      <td>0.80</td>\n",
       "      <td>2.42</td>\n",
       "      <td>3.19</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1.82</td>\n",
       "      <td>2.42</td>\n",
       "      <td>Terrible</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.02</td>\n",
       "      <td>2.20</td>\n",
       "      <td>2.66</td>\n",
       "      <td>0.64</td>\n",
       "      <td>1.42</td>\n",
       "      <td>3.18</td>\n",
       "      <td>3.21</td>\n",
       "      <td>2.63</td>\n",
       "      <td>1.86</td>\n",
       "      <td>2.32</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.22</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.54</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1.54</td>\n",
       "      <td>3.18</td>\n",
       "      <td>2.80</td>\n",
       "      <td>1.31</td>\n",
       "      <td>2.50</td>\n",
       "      <td>Terrible</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.45</td>\n",
       "      <td>1.80</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.46</td>\n",
       "      <td>1.52</td>\n",
       "      <td>3.18</td>\n",
       "      <td>2.96</td>\n",
       "      <td>1.57</td>\n",
       "      <td>2.86</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.51</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.18</td>\n",
       "      <td>0.57</td>\n",
       "      <td>1.54</td>\n",
       "      <td>2.02</td>\n",
       "      <td>3.18</td>\n",
       "      <td>2.78</td>\n",
       "      <td>1.18</td>\n",
       "      <td>2.54</td>\n",
       "      <td>Terrible</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.99</td>\n",
       "      <td>1.28</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.74</td>\n",
       "      <td>1.26</td>\n",
       "      <td>3.17</td>\n",
       "      <td>2.89</td>\n",
       "      <td>1.66</td>\n",
       "      <td>3.66</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.90</td>\n",
       "      <td>1.36</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.86</td>\n",
       "      <td>1.58</td>\n",
       "      <td>3.17</td>\n",
       "      <td>2.66</td>\n",
       "      <td>1.22</td>\n",
       "      <td>3.22</td>\n",
       "      <td>Terrible</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.74</td>\n",
       "      <td>1.40</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.82</td>\n",
       "      <td>1.50</td>\n",
       "      <td>3.17</td>\n",
       "      <td>2.81</td>\n",
       "      <td>1.54</td>\n",
       "      <td>2.88</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1.12</td>\n",
       "      <td>1.76</td>\n",
       "      <td>1.04</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.82</td>\n",
       "      <td>2.14</td>\n",
       "      <td>3.18</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1.41</td>\n",
       "      <td>2.54</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.70</td>\n",
       "      <td>1.36</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.26</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.54</td>\n",
       "      <td>3.17</td>\n",
       "      <td>2.82</td>\n",
       "      <td>2.24</td>\n",
       "      <td>3.12</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1.47</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.66</td>\n",
       "      <td>2.76</td>\n",
       "      <td>3.18</td>\n",
       "      <td>2.89</td>\n",
       "      <td>1.66</td>\n",
       "      <td>2.62</td>\n",
       "      <td>Terrible</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.96</td>\n",
       "      <td>2.96</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.88</td>\n",
       "      <td>2.08</td>\n",
       "      <td>3.17</td>\n",
       "      <td>2.93</td>\n",
       "      <td>1.66</td>\n",
       "      <td>3.42</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.74</td>\n",
       "      <td>1.44</td>\n",
       "      <td>2.75</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.98</td>\n",
       "      <td>1.74</td>\n",
       "      <td>3.20</td>\n",
       "      <td>2.87</td>\n",
       "      <td>1.38</td>\n",
       "      <td>2.34</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.58</td>\n",
       "      <td>1.64</td>\n",
       "      <td>2.27</td>\n",
       "      <td>0.45</td>\n",
       "      <td>1.26</td>\n",
       "      <td>1.72</td>\n",
       "      <td>3.19</td>\n",
       "      <td>2.91</td>\n",
       "      <td>2.30</td>\n",
       "      <td>2.74</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.96</td>\n",
       "      <td>1.68</td>\n",
       "      <td>2.29</td>\n",
       "      <td>0.51</td>\n",
       "      <td>1.20</td>\n",
       "      <td>2.84</td>\n",
       "      <td>3.20</td>\n",
       "      <td>2.82</td>\n",
       "      <td>2.02</td>\n",
       "      <td>2.46</td>\n",
       "      <td>Terrible</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1.25</td>\n",
       "      <td>2.52</td>\n",
       "      <td>1.76</td>\n",
       "      <td>0.50</td>\n",
       "      <td>1.46</td>\n",
       "      <td>2.08</td>\n",
       "      <td>3.19</td>\n",
       "      <td>2.74</td>\n",
       "      <td>1.41</td>\n",
       "      <td>2.32</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.86</td>\n",
       "      <td>1.04</td>\n",
       "      <td>1.76</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.06</td>\n",
       "      <td>1.10</td>\n",
       "      <td>3.18</td>\n",
       "      <td>2.73</td>\n",
       "      <td>1.15</td>\n",
       "      <td>2.98</td>\n",
       "      <td>Good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.61</td>\n",
       "      <td>1.96</td>\n",
       "      <td>2.49</td>\n",
       "      <td>0.66</td>\n",
       "      <td>1.34</td>\n",
       "      <td>1.78</td>\n",
       "      <td>3.20</td>\n",
       "      <td>3.04</td>\n",
       "      <td>1.15</td>\n",
       "      <td>2.42</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.67</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.36</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.82</td>\n",
       "      <td>3.38</td>\n",
       "      <td>3.18</td>\n",
       "      <td>2.86</td>\n",
       "      <td>1.79</td>\n",
       "      <td>2.80</td>\n",
       "      <td>Terrible</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.80</td>\n",
       "      <td>1.04</td>\n",
       "      <td>2.10</td>\n",
       "      <td>0.58</td>\n",
       "      <td>1.18</td>\n",
       "      <td>1.98</td>\n",
       "      <td>3.19</td>\n",
       "      <td>2.93</td>\n",
       "      <td>1.22</td>\n",
       "      <td>2.48</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    art galleries  dance clubs  juice bars  restaurants  museums  resorts  \\\n",
       "0            0.93         1.80        2.29         0.62     0.80     2.42   \n",
       "1            1.02         2.20        2.66         0.64     1.42     3.18   \n",
       "2            1.22         0.80        0.54         0.53     0.24     1.54   \n",
       "3            0.45         1.80        0.29         0.57     0.46     1.52   \n",
       "4            0.51         1.20        1.18         0.57     1.54     2.02   \n",
       "5            0.99         1.28        0.72         0.27     0.74     1.26   \n",
       "6            0.90         1.36        0.26         0.32     0.86     1.58   \n",
       "7            0.74         1.40        0.22         0.41     0.82     1.50   \n",
       "8            1.12         1.76        1.04         0.64     0.82     2.14   \n",
       "9            0.70         1.36        0.22         0.26     1.50     1.54   \n",
       "10           1.47         1.00        0.70         0.75     1.66     2.76   \n",
       "11           0.96         2.96        0.29         0.38     0.88     2.08   \n",
       "12           0.74         1.44        2.75         0.45     0.98     1.74   \n",
       "13           0.58         1.64        2.27         0.45     1.26     1.72   \n",
       "14           0.96         1.68        2.29         0.51     1.20     2.84   \n",
       "15           1.25         2.52        1.76         0.50     1.46     2.08   \n",
       "16           0.86         1.04        1.76         0.34     0.06     1.10   \n",
       "17           0.61         1.96        2.49         0.66     1.34     1.78   \n",
       "18           0.67         1.36        1.36         0.38     0.82     3.38   \n",
       "19           0.80         1.04        2.10         0.58     1.18     1.98   \n",
       "\n",
       "    parks  beaches  theaters  religious_institutions      index  \n",
       "0    3.19     2.79      1.82                    2.42   Terrible  \n",
       "1    3.21     2.63      1.86                    2.32       Good  \n",
       "2    3.18     2.80      1.31                    2.50   Terrible  \n",
       "3    3.18     2.96      1.57                    2.86       Good  \n",
       "4    3.18     2.78      1.18                    2.54   Terrible  \n",
       "5    3.17     2.89      1.66                    3.66       Good  \n",
       "6    3.17     2.66      1.22                    3.22   Terrible  \n",
       "7    3.17     2.81      1.54                    2.88  Excellent  \n",
       "8    3.18     2.79      1.41                    2.54       Good  \n",
       "9    3.17     2.82      2.24                    3.12       Poor  \n",
       "10   3.18     2.89      1.66                    2.62   Terrible  \n",
       "11   3.17     2.93      1.66                    3.42  Excellent  \n",
       "12   3.20     2.87      1.38                    2.34       Good  \n",
       "13   3.19     2.91      2.30                    2.74       Poor  \n",
       "14   3.20     2.82      2.02                    2.46   Terrible  \n",
       "15   3.19     2.74      1.41                    2.32  Excellent  \n",
       "16   3.18     2.73      1.15                    2.98       Good  \n",
       "17   3.20     3.04      1.15                    2.42       Poor  \n",
       "18   3.18     2.86      1.79                    2.80   Terrible  \n",
       "19   3.19     2.93      1.22                    2.48  Excellent  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mainDF['index'] = index_list[n_int-1,:] \n",
    "\n",
    "mainDF['index'].replace(0, \"Terrible\", inplace=True)\n",
    "mainDF['index'].replace(1, \"Poor\", inplace=True)\n",
    "mainDF['index'].replace(2, \"Average\", inplace=True)\n",
    "mainDF['index'].replace(3, \"Good\", inplace=True)\n",
    "mainDF['index'].replace(4, \"Excellent\", inplace=True)\n",
    "\n",
    "mainDF.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "implemetation using k-nearest neighbour for cross-evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans \n",
    "from sklearn.datasets.samples_generator import make_blobs \n",
    "\n",
    "k_means = KMeans(init = \"k-means++\", n_clusters = 5, n_init = 12)\n",
    "k_means.fit(feature)\n",
    "labels = k_means.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2370"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(labels == index_list).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
